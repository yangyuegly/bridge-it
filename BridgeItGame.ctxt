#BlueJ class context
comment0.target=BridgeItGame
comment1.params=
comment1.target=BridgeItGame()
comment1.text=\n\ Constructor\n
comment10.params=curr
comment10.target=Player\ getOpponent(Player)
comment10.text=\n\ return\ the\ opponent\ of\ the\ current\ player\n\ @return\ the\ opponent\n\ @param\ the\ current\ player\n
comment11.params=
comment11.target=Player\ getCurrentPlayer()
comment11.text=\n\ getCurrentPlayer\n\ @return\ currentPlayer\:\ the\ current\ player\n
comment12.params=
comment12.target=void\ resetCurrentPlayer()
comment12.text=\n\ resetCurrentPlayer\ (helper)\:\ to\ player1\n
comment13.params=
comment13.target=boolean\ isPlayer1Turn()
comment13.text=\n\ isPlayer1Turn\n
comment14.params=m1\ m2
comment14.target=boolean\ isHorizontal(Vertex,\ Vertex)
comment14.text=\n\ isHorizontal\ (helper)\n\ @return\ true\ if\ horizontal\ and\ false\ if\ vertical\n
comment15.params=m1\ m2
comment15.target=boolean\ isNeighbor(Vertex,\ Vertex)
comment15.text=\n\ isNeighbor\ (helper)\:\ check\ whether\ two\ vertices\ are\ physically\ adjacent\n\ @return\ whether\ the\ vertices\ are\ adjacent\n\ @param\ vertex\ m1,\ m2\:\ the\ two\ Vertices\ that\n\ @param\ vertex\ 2\n
comment16.params=
comment16.target=boolean\ checkWin()
comment16.text=\n\ checkWin\:\ check\ after\ each\ move\ if\ the\ current\ player\ is\ winning\n\ @param\ the\ player\ who\ just\ played\n
comment17.params=
comment17.target=void\ switchTurns()
comment17.text=\n\ switchTurns\ (helper)\:\ switch\ two\ players'\ turns\n
comment18.params=
comment18.target=boolean\ isPossibleWin()
comment18.text=\n\ isPossibleWin\:\ check\ after\ each\ move\ if\ the\ current\ player\ has\ potential\ to\ win\n\ by\ checking\ whether\ the\ vertices\ on\ the\ borders\ are\ connected\n\ if\ the\ current\ player\ number\ is\ 1\n\ \ \ \ \ \ startConnected\ indicates\ whether\ the\ leftmost\ vertices\ are\ connected\n\ \ \ \ \ \ endConnected\ indicates\ whether\ the\ rightmost\ vertices\ are\ connected\n\ if\ the\ current\ player\ number\ is\ 2\n\ \ \ \ \ \ startConnected\ indicates\ whether\ the\ topmost\ vertices\ are\ connected\n\ \ \ \ \ \ endConnected\ indicates\ whether\ the\ bottommost\ vertices\ are\ connected\n\ \ \ \ \ \ \n\ @return\ boolean\ if\ vertices\ on\ the\ borders\ are\ connected\n
comment19.params=
comment19.target=Player\ getPlayer1()
comment19.text=\n\ The\ followings\ are\ instance\ variable\ getters\n
comment2.params=
comment2.target=void\ removeAllEdge()
comment20.params=
comment20.target=Player\ getPlayer2()
comment21.params=
comment21.target=boolean\ getIsGameOver()
comment22.params=
comment22.target=int\ getWinnerNum()
comment23.params=c
comment23.target=void\ setIsGameOver(boolean)
comment23.text=\n\ Instance\ variable\ setter\n
comment24.params=args
comment24.target=void\ main(java.lang.String[])
comment3.params=inputX\ inputY
comment3.target=void\ move(int,\ int)
comment3.text=\n\ move\:\ add\ edge\ that\ corresponds\ to\ the\ user's\ mouse\ click\ if\ that\ move\ is\ valid\n\ @param\ int\ inputX\:\ the\ x-coordinate\ of\ the\ mouse\ click\n\ @param\ int\ inputY\:\ the\ y-coordinate\ of\ the\ mouse\ click\n
comment4.params=
comment4.target=void\ randomMove()
comment4.text=\n\ randomMove\:\ allows\ the\ computer\ player\ to\ make\ a\ random\ move\n\ \n
comment5.params=targetIndex\ inputX\ inputY
comment5.target=Edge\ findEdge(int,\ int,\ int)
comment5.text=\n\ findEdge\ (helper)\:\ determine\ which\ one\ of\ the\ four\ edges\ (starting\ from\ a\ target\ vertex)\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ that\ the\ user\ clicked\ in\ the\ GUI\n\ @param\ int\ targetIndex\:\ the\ index\ of\ the\ target\ vertex\n\ @param\ int\ inputX\:\ the\ x-coordinate\ of\ the\ mouse\ click\n\ @param\ int\ inputY\:\ the\ y-coordinate\ of\ the\ mouse\ click\n\ @return\ an\ Edge\ that\ corresponds\ to\ where\ the\ user\ clicked\ \n
comment6.params=m1\ m2
comment6.target=boolean\ isMyEdge(Vertex,\ Vertex)
comment6.text=\n\ isMyEdge\ (helper)\n\ @param\ Vertex\ m1,\ Vertex\ m2\n\ @param\ the\ player\ that\ is\ making\ the\ move\n\ @return\ boolean\:\ whether\ two\ Vertices\ have\ been\ connected\ by\ the\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ current\ player\n
comment7.params=m1\ m2
comment7.target=boolean\ isBoundary(Vertex,\ Vertex)
comment7.text=\n\ isBoundary\ (helper)\n\ @param\ Vertex\ m1\n\ @param\ Vertex\ m2\n\ @return\ boolean\:\ whether\ the\ two\ vertices\ are\ on\ the\ boundary\ of\ the\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ current\ player's\ board\n
comment8.params=m1\ m2
comment8.target=boolean\ isBlocked(Vertex,\ Vertex)
comment8.text=\n\ isBlocked\ (helper)\n\ @param\ Vertex\ m1\n\ @param\ Vertex\ m2\n\ @return\ boolean\:\ whether\ the\ opponent\ player\ has\ formed\ an\ edge\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ that\ blocks\ the\ edge\ that\ the\ user\ wants\ to\ form\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ using\ the\ given\ vertices\n
comment9.params=m1\ m2
comment9.target=boolean\ isValidMove(Vertex,\ Vertex)
comment9.text=\n\ isValidMove\n\ @param\ Vertex\ m1\n\ @param\ Vertex\ m2\n\ @return\ boolean\:\ whether\ the\ two\ vertices\ can\ be\ connected.\ \n\ This\ method\ uses\ three\ helper\ methods\ (isMyEdge,\ isBoundary,\ isBlocked)\n
numComments=25
