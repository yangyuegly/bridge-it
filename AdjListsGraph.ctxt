#BlueJ class context
comment0.target=AdjListsGraph
comment1.params=
comment1.target=AdjListsGraph()
comment1.text=\n\ Constructor.\ Creates\ an\ empty\ graph.\n
comment10.params=vertex
comment10.target=void\ removeVertex(java.lang.Object)
comment10.text=\n\ Removes\ a\ single\ vertex\ with\ the\ given\ value\ from\ the\ graph.\ \ \n\ Uses\ equals()\ for\ testing\ equality\n
comment11.params=index
comment11.target=void\ removeVertex(int)
comment11.text=\n\ \ \ \ Helper.\ Removes\ a\ vertex\ at\ the\ given\ index\ from\ the\ graph.\ \ \ \n\ \ \ \ Note\ that\ this\ may\ affect\ the\ index\ values\ of\ other\ vertices.\n
comment12.params=vertex1\ vertex2
comment12.target=void\ addEdge(java.lang.Object,\ java.lang.Object)
comment12.text=\n\ Inserts\ an\ edge\ between\ two\ vertices\ of\ the\ graph.\n\ If\ one\ or\ both\ vertices\ do\ not\ exist,\ ignores\ the\ addition.\n
comment13.params=source\ destination
comment13.target=void\ addArc(java.lang.Object,\ java.lang.Object)
comment13.text=\n\ Inserts\ an\ arc\ from\ v1\ to\ v2.\n\ If\ the\ vertices\ exist,\ else\ does\ not\ change\ the\ graph.\ \n
comment14.params=index1\ index2
comment14.target=void\ addArc(int,\ int)
comment15.params=vertex1\ vertex2
comment15.target=void\ removeEdge(java.lang.Object,\ java.lang.Object)
comment15.text=\n\ Removes\ an\ edge\ between\ two\ vertices\ of\ the\ graph.\n\ If\ one\ or\ both\ vertices\ do\ not\ exist,\ ignores\ the\ removal.\n
comment16.params=vertex1\ vertex2
comment16.target=void\ removeArc(java.lang.Object,\ java.lang.Object)
comment16.text=\n\ Removes\ an\ arc\ from\ vertex\ v1\ to\ vertex\ v2,\n\ if\ the\ vertices\ exist,\ else\ does\ not\ change\ the\ graph.\ \n
comment17.params=index1\ index2
comment17.target=void\ removeArc(int,\ int)
comment17.text=\n\ Helper.\ Removes\ an\ arc\ from\ index\ v1\ to\ index\ v2.\n
comment18.params=
comment18.target=java.lang.String\ toString()
comment19.params=fName
comment19.target=void\ saveToTGF(java.lang.String)
comment19.text=\n\ Saves\ the\ current\ graph\ into\ a\ .tgf\ file.\n\ If\ it\ cannot\ save\ the\ file,\ a\ message\ is\ printed.\ \n
comment2.params=tgf_file_name
comment2.target=AdjListsGraph\ AdjListsGraphFromFile(java.lang.String)
comment2.text=\n\ Creates\ and\ returns\ a\ new\ graph\ using\ the\ data\ found\ in\ the\ input\ file.\n\ If\ the\ file\ does\ not\ exist,\ a\ message\ is\ printed.\ \n
comment20.params=startV\ endV
comment20.target=java.util.LinkedList\ pathDFS(java.lang.Object,\ java.lang.Object)
comment20.text=find\ a\ simple\ path\ in\ a\ graph\ starting\ from\ vertex\ startV\ and\ ending\ in\ vertex\ endV\n@return\ linkedlist\ containing\ the\ path\n@param\ the\ starting\ vertex\ and\ the\ ending\ vertex\n
comment21.params=args
comment21.target=void\ main(java.lang.String[])
comment3.params=
comment3.target=boolean\ isEmpty()
comment3.text=\n\ Returns\ true\ if\ the\ graph\ is\ empty\ and\ false\ otherwise.\ \n
comment4.params=
comment4.target=int\ getNumVertices()
comment4.text=\n\ Returns\ the\ number\ of\ vertices\ in\ the\ graph.\n
comment5.params=
comment5.target=int\ getNumArcs()
comment5.text=\n\ Returns\ the\ number\ of\ arcs\ in\ the\ graph\ by\ counting\ them.\n
comment6.params=vertex1\ vertex2
comment6.target=boolean\ isArc(java.lang.Object,\ java.lang.Object)
comment6.text=\n\ Returns\ true\ iff\ a\ directed\ edge\ exists\ from\ v1\ to\ v2.\n
comment7.params=vertex1\ vertex2
comment7.target=boolean\ isEdge(java.lang.Object,\ java.lang.Object)
comment7.text=\n\ \ \ \ Returns\ true\ iff\ an\ edge\ exists\ between\ two\ given\ vertices\n\ \ \ \ which\ means\ that\ two\ corresponding\ arcs\ exist\ in\ the\ graph\n
comment8.params=i
comment8.target=java.lang.Object\ getVertex(int)
comment9.params=vertex
comment9.target=void\ addVertex(java.lang.Object)
numComments=22
